{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TAE 2023","text":""},{"location":"#description","title":"Description","text":"<p>In this webpage relevant information about control version <code>Git</code> will be shown to you. This information will be helpful because you should upload your RTL to GDSII flow laboratories using <code>OpenLane</code> as EDA suite tools, in this repository RTL2GDS repository.</p>"},{"location":"#instructions","title":"Instructions","text":"<pre><code>$ git clone https://github.com/CristopherA96/tae_2023_rtl2gds           ; # 1. Clone repository using Personal Token\n$ git clone git@github.com:CristopherA96/tae_2023_rtl2gds.git           ; # 1. Clone repository using SSH, if you add SSH key\n$ cd tae_2023_rtl2gds                                                   ; # 2. Change to repo directory\n$ git checkout -b st_&lt;id&gt;                                               ; # 3. Create a branch following st_id structure and switch to it\n$ mkdir &lt;full-name-dir&gt;                                                 ; # 4. Create a folder named like your full name\n$ cd &lt;full-name-dir&gt;                                                    ; # 5. Change your directory\n$ gedit &lt;file.extension&gt;                                                ; # 6. Create a file for test and save changes\n$ git add &lt;file.extension&gt;                                              ; # 7. Add your directory with lab1.pdf inside\n$ git status\n$ git commit -m \"[ST_YOUR_ID] &lt;file&gt; added\"                             ; # 8. Commit your added file\n$ git status\n$ git log\n$ git push origin &lt;st_your_id&gt;                                          ; # 9. Publish your changes withing your branch to remote repo\n</code></pre> <p>Info</p> <p>You can add a file that you want not neccesary lab1.pdf. This file was for example, but you can add a test.txt file only to add something to the directory that you can publish.</p> <p>Failure</p> <p>You will be working on your branch, please do not modify files from other branches if it is not yours.</p> <p>Info</p> <p>Once you have created your branch and within it the folder with your full name. Inside the folder of your name add or create the files to report the results of the laboratories.</p>"},{"location":"#git-flow-example","title":"Git Flow example","text":"<p>Example</p> <pre><code>$ git clone https://github.com/CristopherA96/tae_2023_rtl2gds           ; # 1. Clone repository using HTTPS, if you set Personal Token\n$ git clone git@github.com:CristopherA96/tae_2023_rtl2gds.git           ; # 1. Clone repository using SSH, if you add SSH key\n$ cd tae_2023_rtl2gds                                                   ; # 2. Change to repo directory\n$ git checkout -b st_1                                                  ; # 3. Create a branch following st_id structure and switch to it\n$ mkdir juan_perez                                                      ; # 4. Create a folder named like your full name.\n$ cd juan_perez                                                         ; # 5. Change to your directory\n$ cp ~/tae_reports/lab1.pdf .                                           ; # 6. Copy external files to your repo. In this case just one file added.\n$ git add lab1.pdf                                                      ; # 7. Add files to the git repo.\n$ git status                                                            ; # Optional: Check status to see changes to be commited\n$ git commit -m \"[ST_1_LAB1] lab1.pdf was added\"                        ; # 8. Commit staged file\n$ git status                                                            $ git log                                                               ; # 9. See log history. The commit you made should appear\n$ git push origin st_1                                                  ; # 10. Publish changes to your branch into remote repo\n</code></pre> <p>You can also visit Git Flow section.</p> <p>Warning</p> <p>If you set your key, use SSH url instead HTTPS.</p>"},{"location":"configure_github/","title":"Configure Github","text":""},{"location":"configure_github/#github-authentication","title":"GitHub authentication","text":"<p>There are some ways to configure GitHub account to be able to clone or create a repository:</p> <ul> <li>Personal Token: only applies for HTTPS.</li> <li>SSH key: applies for SSH remote URL.</li> </ul> <p>Info</p> <p>Both options assume you have your <code>git</code> configured.</p>"},{"location":"configure_github/#ssh","title":"SSH","text":"The most common way to authenticate to GitHub is using SSH keys, because using personal tokens means that when the token expires you have to create another one and that becomes tedious. Therefore, ssh keys are a better option for authentication, since as long as the key is active it will not ask you to enter your username or password every time you want to interact with GitHub."},{"location":"configure_github/#create-ssh-key","title":"Create SSH key","text":"<p>Example</p> <p>Check if ssh-keygen is installed <pre><code>    $ which ssh-keygen                                  ; # Verify you have ssh-keygen package, if not:\n$ sudo apt install openssh-client                   ; # Install openssh package\n</code></pre> <pre><code>    ; # 1. CREATE SSH KEY\n$ ssh-keygen -t ed25519 -C \"your_github_email@email_provider.com\"          ; # Option 1: using ed25519 algorithm (Recommended)\n# or\n$ ssh-keygen -t rsa -b 4096 -C \"your_github_email@email_provider.com\"      ; # Option 2. using RSA with 4096 bits for security\n; # It will show you information like the following\nGenerating public/private &lt;rsa,ed25519&gt; key pair.\nEnter file in which to save the key (/home/&lt;your_user&gt;/.ssh/id_rsa): &lt;path-with-different-keyname&gt;\nEnter passphrase (empty for no passphrase): &lt;type-pass&gt;\nEnter same passphrase again: &lt;type-pass&gt;\n; # 2. ADD SSH KEY TO ssh-agent\n; # If you have any problem with ssh-agent, before ssh-agent start, run ssh-agent process\n$ exec ssh-agent bash\n$ eval \"$(ssh-agent -s)\"                                                    ; # Start SSH agent in background\n; # It will show you information like the following\nAgent pid &lt;id&gt;\n$ ssh-add ~/.ssh/&lt;keyname&gt;                                                  ; # Add your SSH private key to ssh-agent\n</code></pre></p> <p>Warning</p> <p>If this is your first time adding a key to GitHub, you can use any encryption algorithm that your system supports, but if you already had keys added and they are of type <code>RSA</code> you should delete everything about that key with GitHub in the <code>known_hosts</code> file or update <code>SHA-1</code> to <code>SHA-2</code>. This is due to problems that were found with that type of algorithm on GitHub, which will prevent you from getting the <code>Error: Permission denied (publickey)</code>.</p>"},{"location":"configure_github/#add-ssh-key-to-github","title":"Add SSH key to GitHub","text":"<p>The steps to add SSH key are:</p> <ol> <li>Go to GitHub.</li> <li>Sign in if you haven't already.</li> <li>In the top right corner of the page, click on your profile picture, then Settings.</li> <li>Click on SSH and GPG keys.</li> <li>Click on New SSH key.</li> <li>Add a descriptive title for your SSH key.</li> <li>Choose Authentication Key.</li> <li>In terminal: <code>cat ~/.ssh/&lt;keyname&gt;.pub</code>, and copy-paste output in Key section.</li> <li>Add SSH key.</li> </ol> <p> Figure 1: Window to add your public SSH key information.. </p>"},{"location":"git_commands/","title":"Git Commands","text":""},{"location":"git_commands/#glossary","title":"Glossary","text":"<p>Info</p> <ul> <li>HEAD is the pointer of the current branch reference.</li> <li>origin is a short name for the remote repository. It references the original repository url.</li> <li>main is the name of the default branch.</li> <li>unstaged means changes that are not tracked by the git.</li> <li>staged means that you have marked a modified file, it is like a tmp place, where you have added files.</li> <li>stash stores temporaly changes locally. It helps when you want to update a repo but have made changes that haven't been published to the remote branch.</li> </ul>"},{"location":"git_commands/#getting-started","title":"Getting started","text":""},{"location":"git_commands/#create-repository-locally","title":"Create repository locally","text":"<pre><code>    $ mkdir &lt;dir&gt;                   ; # Create local repo\n$ cd &lt;dir&gt;                      ; # Change dir\n$ git init .                    ; # Initialize current dir as repo with default branch\n</code></pre> <p>Info</p> <p>The default branch if you do not specify nothing and depending on your git version is <code>master</code>. Future git version will have default branch <code>main</code>. You can change this setting in your <code>git config</code>. <pre><code>    $ git config --global init.defaultBranch main\n</code></pre> or by initializing with <pre><code>    $ git init -b main\n</code></pre></p>"},{"location":"git_commands/#add-files","title":"Add files","text":"<pre><code>    $ git add .                             ; # Add all files in the current directory\n$ git add &lt;file&gt;                        ; # Add single file\n$ git add &lt;file1&gt; &lt;file2&gt; &lt;...&gt;         ; # Add multiple files\n$ git add *.&lt;extension&gt;                 ; # Add all files with same pattern (extension)\n</code></pre>"},{"location":"git_commands/#view-status","title":"View status","text":"<pre><code>    $ git status                            ; # View full status\n$ git status -s                         ; # View short status\n</code></pre>"},{"location":"git_commands/#commit-changes","title":"Commit changes","text":"<pre><code>    $ git commit -m \"MESSAGE\"               ; # Commit changes with specific message\n$ git commit                            ; # Opens default editor and type a long message\n</code></pre>"},{"location":"git_commands/#change-commit-message","title":"Change commit message","text":"<pre><code>    $ git commit --amend -m \"NEW_MESSAGE\"   ; # Commit changes with new specific message. Only for the last one\n</code></pre>"},{"location":"git_commands/#remove-files","title":"Remove files","text":"<pre><code>    $ git rm &lt;file&gt;                         ; # Remove a file\n$ git rm *                              ; # Remove all file in current directory\n$ git rm --cached &lt;file&gt;                ; # Remove file from staging area only\n</code></pre>"},{"location":"git_commands/#renamemove-files","title":"Rename/Move files","text":"<pre><code>    $ git mv &lt;file&gt; &lt;rename-file&gt;           ; # Rename file\n$ git mv &lt;file-path&gt; &lt;new-path&gt;         ; # Move files to a new path\n</code></pre>"},{"location":"git_commands/#view-stagedunstaged-changes","title":"View staged/unstaged changes","text":"<pre><code>    $ git diff                              ; # Shows unstaged changes \n$ git diff --staged                     ; # Shows staged changes\n</code></pre>"},{"location":"git_commands/#view-history-log","title":"View history log","text":"<pre><code>    $ git log                               ; # View full log history\n$ git log --oneline                     ; # View log summary\n$ git log --reverse                     ; # View commits from oldest to newest\n</code></pre>"},{"location":"git_commands/#view-commits","title":"View commitS","text":"<pre><code>    $ git commit &lt;id-commit&gt;                ; # View giving commit\n$ git commit HEAD                       ; # View last commit\n</code></pre>"},{"location":"git_commands/#unstaging-files","title":"Unstaging files","text":"<pre><code>    $ git restore --staged &lt;file&gt;           ; # Undo an added file\n</code></pre> <p>Info</p> <p>To undo an added file is very useful this command.</p>"},{"location":"git_commands/#discard-local-changes","title":"Discard local changes","text":"<pre><code>    $ git restore &lt;file&gt;                    ; # Restore a giving file\n$ git restore &lt;file&gt; &lt;...&gt;              ; # Restore multiple files\n$ git restore .                         ; # Restore all files in the current path\n</code></pre>"},{"location":"git_commands/#check-out-commitbranch","title":"Check out commit/branch","text":"<pre><code>    $ git checkout &lt;id-commit&gt;              ; # Checks out the given commit\n$ git checkout &lt;branch-name&gt;            ; # Switch to branch-name\n$ git checkout -b &lt;branch-name&gt;         ; # Create a branch and switch to it\n</code></pre> <p>Info</p> <p><code>git switch</code> and <code>git checkout</code> are equivalent.</p>"},{"location":"git_commands/#create-branch","title":"Create branch","text":"<pre><code>    $ git branch &lt;branch-name&gt;              ; # Create a new branch\n</code></pre> <p>Info</p> <p>To remove a branch use <code>git branch -d &lt;branch-name&gt;</code>.</p>"},{"location":"git_commands/#stash","title":"Stash","text":"<pre><code>    $ git stash push -m \"Msg for tmp save\"  ; # Save and publish temporaly saving\n</code></pre>"},{"location":"git_commands/#merge","title":"Merge","text":"<pre><code>    $ git merge &lt;origin&gt; &lt;branch&gt;           ; # Merge branch into current branch\n</code></pre> <p>Info</p> <p>To abort merge changes, use <code>git merge --abort</code>.</p>"},{"location":"git_commands/#rebase","title":"Rebase","text":"<pre><code>    $ git rebase &lt;branch&gt;                    ; # Changes the base of the current branch\n</code></pre>"},{"location":"git_commands/#clone-repository","title":"Clone repository","text":"<pre><code>    $ git clone &lt;url-repo&gt;                   ; # Clone a remote repository\n</code></pre>"},{"location":"git_commands/#sync-with-remote","title":"Sync with remote","text":"<pre><code>    $ git fetch origin &lt;branch-name&gt;         ; # Search branch from origin\n</code></pre>"},{"location":"git_commands/#update-local-repo-with-remote","title":"Update local repo with remote","text":"<pre><code>    $ git pull origin &lt;branch&gt;               ; # Gets the changes from remote branch into local repo\n</code></pre> <p>Info</p> <p><code>git pull</code> is a combination of <code>git fetch + git merge</code>. For divergent branches issues, use: <pre><code>    $ git fetch origin &lt;branch&gt;\n$ git merge origin/&lt;branch&gt;\n</code></pre></p>"},{"location":"git_commands/#manage-remote-repos","title":"Manage remote repos","text":"<pre><code>    $ git remote                             ; # Shows remote repos\n$ git remote add &lt;remote&gt;                ; # Add new remote path named whatever you like\n</code></pre>"},{"location":"git_commands/#undoing-commits","title":"Undoing commits","text":"<pre><code>    $ git reset --soft HEAD^                 ; # Remove the last commit, keeps changed staged\n$ git reset --mixed HEAD^                ; # Unstage the changes as well\n$ git reset --hard HEAD^                 ; # Discard local changes\n</code></pre> <p>Warning</p> <p>Be very careful, using <code>git reset</code> because those changes are not irreversible and you can lose everything.</p>"},{"location":"git_commands/#publish-local-repo-with-remote","title":"Publish local repo with remote","text":"<pre><code>    $ git push origin &lt;branch&gt;                 ; # Publish your local changes into your remote origin path\n</code></pre>"},{"location":"git_commands/#additional-commands","title":"Additional commands","text":""},{"location":"git_commands/#view-contributors","title":"View contributors","text":"<pre><code>    $ git shortlog                          ; # Shows contributors of a repo\n</code></pre>"},{"location":"git_commands/#find-author","title":"Find author","text":"<pre><code>    $ git blame &lt;file&gt;                      ; # Shows the authorof each line in file\n</code></pre>"},{"location":"git_commands/#revert-commits","title":"Revert commits","text":"<pre><code>    $ git revert &lt;id-commit&gt;                ; # Revert the given commit\n$ git revert HEAD~2..                   ; # Revert last two commits\n</code></pre>"},{"location":"git_commands/#recover-lost-commits","title":"Recover lost commits","text":"<pre><code>    $ git reflog                            ; # Shows the history of HEAD\n</code></pre>"},{"location":"git_flow/","title":"Git Flow","text":""},{"location":"git_flow/#basic-flow","title":"Basic flow","text":""},{"location":"git_flow/#option-1-by-creating-repo","title":"Option 1: By creating repo","text":"<p>Info</p> <p>With this option you create the repository locally and then you connect it to a created remote repository. It supposses that you already have a remote repository created.</p> <pre><code>    $ mkdir -p &lt;dir&gt;                            ; # Create the directory\n$ cd &lt;dir&gt;                                  ; # Change to directory\n$ git init -b main                          ; # Initialize directory by setting a main branch\n$ vi &lt;file&gt;                                 ; # Create files, if you do not have them. i.e: README.md file\n$ git status                                ; # Check repo's status. See repo changes\n$ git add &lt;file&gt;                            ; # Add files locally.\n$ git commit -m \"MESSAGE\"                   ; # Commit added files.\n$ git status                                ; # Check repo's status. See clean repo\n$ git log                                   ; # See log history of your commits\n$ git remote add origin &lt;url-repo&gt;          ; # Create the remote connection between local and remote\n$ git remote -v                             ; # Check remote status\n$ git push origin main                      ; # Publish changes from local to remote repo\n</code></pre>"},{"location":"git_flow/#option-2-by-cloning-repo","title":"Option 2: By cloning repo","text":"<p>Info</p> <p>Using this option assumes that you have created a remote repository on GitHub. If you do not know how to create it, visit GitHub section.</p> <pre><code>    ## Move to a path where you want to save this repo, and then follow:\n$ git clone &lt;url-repo&gt;                      ; # Clone remote repo in your local path\n$ vi &lt;file&gt;                                 ; # Create/Edit files\n$ git status                                ; # Check repo's status. See repo changes\n$ git add &lt;file&gt;                            ; # Add files locally.\n$ git commit -m \"MESSAGE\"                   ; # Commit added files.\n$ git status                                ; # Check repo's status. See clean repo\n$ git log                                   ; # See log history of your commits\n$ git push origin main                      ; # Publish changes from local changes to remote repo\n</code></pre> <p>Note</p> <p>By cloning a repo, you have the remote connection automatically.</p>"},{"location":"github/","title":"GitHub","text":""},{"location":"github/#create-a-repository-in-github","title":"Create a repository in GitHub","text":""},{"location":"github/#new-users","title":"New users","text":"<p>The steps to create a repository for new users are:</p> <ol> <li>Go to GitHub.</li> <li>Click on <code>Sign up</code></li> <li>Fill the information and validate your account.</li> <li>Go to <code>Repositories</code> section.</li> <li>Click on <code>New</code>.</li> <li>Enter your <code>Repository name</code>.</li> <li>Add a brief <code>Description</code> about your repository.</li> <li>Choose the visibility of your repository.</li> <li>Select <code>Add a README file</code>.</li> <li>(Optional) <code>Add .gitignore</code>.</li> <li>(Optional) <code>Choose a license</code>.</li> <li>Finally, click on <code>Create repository</code>.</li> </ol> <p>Info</p> <p>Now, you have been created a git repository. You are ready to work on it.</p> <p>The descriptive image for those steps is shown below.</p> <p> Figure 1: Some steps to follow in order to create a git repository. Steps 1, 3, 4 and 5 are not shown in this image. </p>"},{"location":"github/#existing-users","title":"Existing users","text":"<p>The steps to create a repository for existing users are:</p> <ol> <li>Go to GitHub.</li> <li>Click on <code>Sign in</code></li> <li>Go to <code>Repositories</code> section.</li> <li>Click on <code>New</code>.</li> <li>Enter your <code>Repository name</code>.</li> <li>Add a brief <code>Description</code> about your repository.</li> <li>Choose the visibility of your repository.</li> <li>Select <code>Add a README file</code>.</li> <li>(Optional) <code>Add .gitignore</code>.</li> <li>(Optional) <code>Choose a license</code>.</li> <li>Finally, click on <code>Create repository</code>.</li> </ol> <p>The descriptive image for those steps is shown below.</p> <p> Figure 1: Some steps to follow in order to create a git repository. Steps 1, 3 and 4 are not shown in this image. </p> <p>Note</p> <p>You are ready to use your repository.</p>"},{"location":"tcl/","title":"Tcl","text":""},{"location":"tcl/#overview","title":"Overview","text":"<p>TCL means Tool Command Language, it is one of the most popular scripting languages in the industry just like Perl.</p> <p>It supports the next characteristics:</p> <ul> <li>Variables, Control structures, Command substitution</li> <li>Quotes and braces, String manipulation</li> <li>I/O and Network sockets</li> <li>File management, Time and date manipulation</li> <li>Functions and Subprocesses</li> <li>List, Arrays and Events</li> <li>Comments (Inline and not inline)</li> <li>Built-in functions</li> </ul> <p>In the following chapters we will be learning a little about each of the basic features mentioned.</p>"},{"location":"tcl/#variables","title":"Variables","text":"<p>Tcl as many other languages allows us to store values in variables. This values can be access by using a command, such as <code>set</code>.</p> <p>This command is typically used to write and read variables.</p> <p>Example</p> <pre><code># Writing in var1 the value 10\nset var1 10\n# Reading the value of var1\nset var1\n\n# To use value of variable in a command\nexpr $var1+20\n</code></pre> <p>Info</p> <p>In Tcl we do not have data types, also we do not need to declare variables, they will be created automatically once it is set.</p>"},{"location":"tcl/#control-structures","title":"Control structures","text":"<p>Some of the most common control structures include conditional, looping and procedures. This control structures are commands that will take Tcl scripts as arguments.</p>"},{"location":"tcl/#conditional","title":"Conditional","text":"<p>The structure for decisions operations using conditional structures is shown below.</p> <p>if-else <pre><code>    if {bool_expression} {                              # tasks to do when bool_expression is True\n} else {\n# tasks to do when boll_expression is False\n}\n</code></pre></p> <p>if-else if-else <pre><code>    if {bool_expr_1} {                              # tasks to do when bool_expr_1 is True\n} elseif {bool_expr_2}  {\n# tasks to do when bool_expr_2 is True\n} else {\n# tasks to do when none of above conditions is True\n}\n</code></pre></p> <p>switch <pre><code>    switch trigger_var {\nopt_1 {\n# Tasks to do when opt_1 is trigger\n}\nopt_2 {\n# Tasks to do when opt_1 is trigger\n}\n...\n        ...\n    }\n</code></pre></p> <p>'?' operator <pre><code>    trigger_var ? expr_1_True : expr_2_False\n</code></pre></p> <p>Some examples for conditional structures shown above are:</p> <p>Example</p> <pre><code># if-else if-else\nset var1 10\nif { $var1 &gt; 10 } {\nputs \"The value of var1 is greater than 10\"\n} elseif { $var1 != 10} {\nputs \"The value is not equal to 10\"\n} else {\nputs \"The value is $var1\"\n}\n# if-else\nset age 20\nif { $age &gt; 20 } {\nputs \"You are older than 20 years old\"\n} else {\nputs \"You are younger than 20 years old\"\n}\n# '?' operator\nset var 1\nset var_1 [expr $var != 2 ? 3 : 4]\nputs \"Value of var_1 is %var_1\"\n</code></pre>"},{"location":"tcl/#loops","title":"Loops","text":"<p>In order to do repetitive tasks, we typically use loops, some of them are:</p> <ul> <li>while: it repeats statements while a given condition is true. It means, that while loop tests the condition before executing repetitive tasks.</li> <li>for: it executes multiple statements every time.</li> <li>foreach: it works equal to for loop but using simplified syntaxis.</li> </ul> <p>while <pre><code>    while {condition} {\n# tasks to repeat\n}\n</code></pre></p> <p>for <pre><code>    for {initialization} {condition} {increment} {\n# tasks to repeat\n}\n</code></pre></p> <p>foreach <pre><code>    foreach {element} {list_body} {\n# tasks to repeat\n}\n</code></pre></p> <p>Some examples for loop structures shown above are:</p> <p>Example</p> <pre><code># while\nset var1 10\nwhile { $var1 &gt; 10 } {\nputs \"Value of var1: $var1\"\nincr var1\n    }\n# for\nfor { set i 10 } {$i &lt; 10} {incr i} {\nputs \"Index $i\"\n}\n# foreach\nset list { 1 2 3 4 }\nforeach item $list {\nputs \"Item in list is $item\"\n}\n</code></pre> <p>Info</p> <p>Also, we have loop control methods such as <code>break</code> and <code>continue</code>.</p>"},{"location":"tcl/#command-substitution","title":"Command substitution","text":"<p>This term is used to modify the value of a built-in function of the value of a variable. To do that, we usually use the <code>expr</code> command and then the new value, all of this into square brackets</p> <pre><code>    set var1 10\nset var2 [expr $var1 + 2]\n</code></pre> <p>Info</p> <p><code>expr</code> is a command used to evaluate a given expression and display its standard output (stdout).</p>"},{"location":"tcl/#variable-substitution","title":"Variable substitution","text":"<p>Another great feature of Tcl is something called \"variable substitution\", it refers to accessing the value stored in a variable with a dollar sign <code>$</code> before the variable name</p> <pre><code>    set var1 10\nputs \"a is $a\"\n</code></pre>"},{"location":"tcl/#data-structures","title":"Data structures","text":"<p>Array An array is a group or a container of variables which contains each element on a specific index.</p> <pre><code>    set array_name(index) value\n\n# empty array\narray set array_name {}\n</code></pre> <p>Info</p> <p>Some built-in functions to manipulate arrays are: - Size of array <code>[array size array_name]</code> - Exists element in array <code>[array exists array_item]</code> - Return names of index in array <code>[array names array_name]</code></p> <p>List A list as we know is a collection of items.</p> <pre><code>    set my_list { item1 item2 item3 ... }       ;# Option 1 to declare a list\nset my_list [list item1 item2 item3 ... ]   ;# Option 2 to declare a list using built-in function `list`\nset my_list [split \"items separated by a character \" split_character]   ;# Option3 to declare a list using a split character to separate items\n</code></pre> <p>Info</p> <p>Some built-in functions are: - Append item in list <code>append list_name split_character value</code> or <code>append list_name value</code> - Length of list <code>[llength list_name]</code> - List item at index <code>[lindex list_name index]</code> - Insert items at index <code>[linsert list_name index value_1 value_2 ... ]</code> - Replace items  at index <code>[lreplace list_name first_index last_index value_1 value_2 ... ]</code> - Set item at index <code>[lset list_name index value]</code> - Transform list to variables <code>lassign list_name var1 var2 ...</code> - Sort a list <code>[lsort list_name]</code></p> <p>Dictionary A dictionary is an associative array, it maps values to keys.</p> <pre><code>    dict set dictionary_name key value      ;# Option 1 to declare a dictionary\ndict create dictionary_name key1 value1 key2 value2 ...\n</code></pre> <p>Info</p> <p>Some built-in functions are: - Size of dictionary <code>[dict size dictionary_name]</code> - Get value for key <code>[dict get $dictionary_name $key]</code> - Get all keys <code>[dict keys $dictionary_name]</code> - Get all values <code>[dict values $dictionary_name]</code> - Know if key exists <code>[dict exists $dictionary_name $key]</code></p> <p>Procedures Procedures are like functions in other languages.</p> <pre><code>    proc procedure_name {arguments} {\n# Tasks to implement\n}\n</code></pre> <p>Some examples for those data structures are shown below:</p> <p>Example</p> <pre><code>    # Array\narray set my_array { 1 2 3 4 5 6 }           ;# Initialize array with some values\nfor { set i 0 } { $i &lt; [array size my_array] } { incr i } {\nputs \"Value_$i is $my_array($i)\"\n}\n# List\nset my_list_1 { 1 2 3 4 5 6 }\nputs $my_list_1\nset my_list_2 [list 1 2 2 4 4 5 6]\nputs $my_list_2\nset my_list_3 [split \"mon_tue_wed_thu_fri_sat_sun\" _]\nputs $my_list_3\n# Dictionary\nset days [dict create day1 \"monday\" day2 \"tuesday\"]\nputs $days\nforeach item [dict keys $days] {                    ;# Iterating into entire days dictionary (keys with values)\nset value [dict get $days $item]                ;# Setting value var with the return of getting value for each key\nputs $value                                     ;# Printing value content\n}\n# Procedures\nproc mult {var1 var2} {\nset mult_res [expr { $var1 * $var2 } ]\nreturn \"The product of $var1 * $var2 is $mult_res\"\n}\nputs [add 20 30]\n</code></pre>"},{"location":"tcl/#file-io","title":"File I/O","text":"<p>In Tcl we can handle with files by using some built-in functions, such as <code>open, read, puts, gets, close</code>.</p> <p>Open a file <pre><code>    open file_name access_mode          ;# Access modes are r -&gt; read, w -&gt; write, a -&gt; append, r+ -&gt; read and write (file shall exist), w+ -&gt; read and write (file is overwritten if exists otherwise it will create it.), a+ -&gt; read and write (read will start at beginning, but writing can only be appended). \n</code></pre></p> <p>Close a file <pre><code>    close file_name </code></pre></p> <p>Write a file <pre><code>    puts $filename \"text to write\"\n</code></pre></p> <p>Read a file <pre><code>    set file_data_to_read [read $filename]\n</code></pre></p> <p>Some examples for those instructions are shown below.</p> <p>Example</p> <pre><code>    # Writing into text.txt file\nset filename_pointer [open \"text.txt\" w+]           ;# Opening file to write into it\nputs $filename_pointer \"test 1\"                     ;# Writing test 1 in the file text.txt\nclose $filename_pointer                             ;# Closing filename_pointer file\n# Reading a file\nset filename_pointer [open \"text.txt\" r]            ;# Opening file to read the text file\nset file_data_to_read [read $filename_pointer]      ;# Reading filename\nputs $file_data_to_read                             ;# Printing data that was read\nclose $filename_pointer                             ;# Closing filename_pointer file\n# Another option to work with text.txt file\nset filename_pointer [open \"text.txt\" w+]\nputs $filename_pointer \"test\\ntest\"\nclose $filename_pointer\nset filename_pointer [open \"text.txt\" r]\nwhile { [gets $filename_pointer data] &gt;= 0 } {\nputs $data\n}\nclose $filename_pointer\n</code></pre>"},{"location":"tcl/#regular-expression","title":"Regular expression","text":"<p>To work with regular expression we use <code>regexp</code> in Tcl, we know that regular expression is a sequence of characters that contains a search pattern.</p> <pre><code>    regexp optional_switches patterns search_string full_match sub_match_1 ...\n</code></pre> Regular expression Description x Exact match [a-z] Any lowercase letter from a-z . Any character ^ Beginning string should match $ Ending string should match \\^ Backslash sequence to match special character ^. () Add the above sequences inside parenthesis to make a regular expression x* Should match 0 or more ocurrences of the preceding x x+ Should match 1 or more ocurrences of the preceding x [a-z]? Should match 0 or 1 occurrence of the preceding x {digit} Matches exactly digit ocurrences of previous regex expression. Digit that contains 0-9 {digit,} Matches 3 or more digit ocurrences of previous regex expression. Digit that contains 0-9 {digit1, digit2} Ocurrences matches the range between digit1 and digit2 ocurrences of previous regex expressions."},{"location":"tcl/#special-variables","title":"Special variables","text":"<p>Additional to all basic features that Tcl has, there are something called special variables. Those variables shall have special functionality.</p> Regular expression Description argc Refers to a number of command-line arguments argv Refers to the list containing the command-line arguments argv0 Refers to the file name of the file being interpreted or the name by which we invoke the script env Used to represent the array of elements that are environment variables errorCode Used to provide the error code for the last error <p>There are more special variables but some of the most useful are shown above.</p>"},{"location":"tcl/#laboratory","title":"Laboratory","text":"<p>Develop a program that will implement:</p> <ul> <li>Procedures for basic arithmetical operations, such as add, sub, mul, div with two numbers.</li> <li>Each procedure can be access by selecting an option in a menu.</li> <li>The values for each number and the results of each operation shall be store in a file. i.e. add 2 4 6</li> <li>In the menu, shall have an option to read the numbers into the file which can be used to do the other operations with those values, it is something like to import content of a file to handle with.</li> </ul> <p>Info</p> <p>Please, try to use as much as you can the features provided in this guide. Be creative.</p>"}]}